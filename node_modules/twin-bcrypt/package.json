{
  "name": "twin-bcrypt",
  "version": "2.1.1",
  "description": "asm.js JavaScript BCrypt implementation for NodeJS and the browser.",
  "author": {
    "name": "FranÃ§ois Pirsch",
    "url": "https://github.com/fpirsch"
  },
  "main": "./twin-bcrypt.min.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/fpirsch/twin-bcrypt.git"
  },
  "scripts": {
    "test": "mocha test/node-test.js"
  },
  "bin": {
    "twin-bcrypt": "./bin/twin-bcrypt.js"
  },
  "bugs": {
    "url": "https://github.com/fpirsch/twin-bcrypt/issues"
  },
  "keywords": [
    "bcrypt",
    "javascript",
    "js",
    "asm.js",
    "hash",
    "password",
    "auth",
    "authentication",
    "encryption",
    "crypt",
    "crypto"
  ],
  "devDependencies": {
    "gear": ">=0.9.5",
    "gear-lib": "*",
    "setimmediate": "1.*",
    "mocha": "*",
    "chai": "*"
  },
  "license": "BSD-3-Clause",
  "readme": "twin-bcrypt\r\n===========\r\n[![Build Status](https://secure.travis-ci.org/fpirsch/twin-bcrypt.png)](http://travis-ci.org/fpirsch/twin-bcrypt.png)\r\n[![Dependency Status](https://david-dm.org/fpirsch/twin-bcrypt.png)](https://david-dm.org/fpirsch/twin-bcrypt)\r\n\r\nFast [asm.js](https://en.wikipedia.org/wiki/Asm.js) implementation of the [BCrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm for Node and the browser without dependencies.\r\nSee the [demo here](http://fpirsch.github.io/twin-bcrypt/).\r\nAlso used in the real world in this great [.htpasswd file generator](http://aspirine.org/htpasswd_en.html) in parallel with\r\n[web workers](https://en.wikipedia.org/wiki/Web_worker).\r\n\r\n\r\n## Basic usage:\r\n#### Synchronous (blocking)\r\n```javascript\r\nvar hash = TwinBcrypt.hashSync(\"bacon\");\r\n\r\nTwinBcrypt.compareSync(\"bacon\", hash); // true\r\nTwinBcrypt.compareSync(\"veggies\", hash); // false\r\n```\r\n\r\n#### Asynchronous (non-blocking)\r\nAsynchronous mode is preferred. Besides not blocking the javascript engine, it gives the opportunity to display progression information, and even to abort computations.\r\n\r\nWith a default-generated salt.\r\n```javascript\r\nTwinBcrypt.hash(\"bacon\", function(hash) {\r\n  // Store hash in your password DB.\r\n});\r\n```\r\n\r\nWith progression info and optional operation abort.\r\n```javascript\r\nTwinBcrypt.hash(\"bacon\",\r\n  function(p) {\r\n    progressBar.value = p;\r\n    if (tooLong) return false;\r\n  },\r\n  function(hash) {\r\n    // Store hash in your password DB.\r\n  }\r\n);\r\n```\r\n\r\nCheck a given password against a given hash\r\n```javascript\r\n// Load hash from your password DB.\r\nTwinBcrypt.compare(\"bacon\", hash, function(result) {\r\n    // result === true\r\n});\r\nTwinBcrypt.compare(\"veggies\", hash, function(result) {\r\n    // result === false\r\n});\r\n```\r\n\r\nIn the above examples, the salt is automatically generated and attached to the hash.\r\nThough you can use your custom salt and there is no need for salts to be persisted as it will always be included in the final hash result and can be retrieved.\r\n\r\n\r\n## API\r\n* `genSalt(cost)`\r\n    * `cost` - [OPTIONAL] - Integer between 4 and 31 inclusive. Default 10. This value is logarithmic, the actual number of iterations used will be 2<sup>cost</sup> : increasing the cost by 1 will double the amount of time taken.\r\n* `hashSync(data, salt)`\r\n    * `data` - [REQUIRED] - the data to be encrypted.\r\n    * `salt` - [OPTIONAL] - the salt to be used in encryption. If specified as a number then a salt will be generated and used.\r\n* `hash(data, salt, progress, callback)`\r\n    * `data` - [REQUIRED] - the data to be encrypted.\r\n    * `salt` - [OPTIONAL] - the salt to be used to hash the password. If specified as a number then a salt will be generated and used.\r\n    * `progress` - [OPTIONAL] - a callback to be invoked during the hash calculation to signify progress. This callback can return `false` to stop the process.\r\n        * `p` - Value between 0 (exclusive) and 1 (inclusive), sent as a parameter to the progress callback.\r\n    * `callback` - [REQUIRED] - a callback to be fired once the data has been encrypted (and if the process has not been stopped).\r\n        * `result` - Hashed data received as an argument.\r\n* `compareSync(password, refhash)`\r\n    * `password` - [REQUIRED] - password to check.\r\n    * `refhash` - [REQUIRED] - reference hash to check the password against.\r\n    Returns true if the password matches, false if it doesn't. Throws an error if arguments are invalid.\r\n* `compare(password, refhash, progress, callback)`\r\n    * `password` - [REQUIRED] - password to check.\r\n    * `refhash` - [REQUIRED] - reference hash to check the password against.\r\n    * `progress` - [OPTIONAL] - a callback to be called during the hash verification to signify progress\r\n        * `p` - Value between 0 (exclusive) and 1 (inclusive), sent as a parameter to the progress callback. This callback can return `false` to stop the process.\r\n    * `callback` - [REQUIRED] - a callback to be fired once the data has been compared.\r\n        * `result` - Boolean received as an argument to the callback, indicating whether the data and encrypted forms match (and if the process has not been stopped).\r\n* `encodingMode`\r\n    * `ENCODING_UTF8` (default) - encodes non-ascii characters to utf-8 before hashing.\r\n    * `ENCODING_RAW` - does not encode non-ascii characters in the password. This allows the use of custom encodings.\r\n\r\n\r\n## Character encoding\r\nIn order to provide support for unicode strings, passwords with non-ascii characters are utf-8 encoded by default before being hashed.\r\nIf a different encoding is desired, the password should be encoded before handing it to TwinBcrypt, and the following option should\r\nbe used :\r\n\r\n`TwinBcrypt.encodingMode = TwinBcrypt.ENCODING_RAW;`\r\n\r\n\r\n## Command-line\r\nWith a global installation:\r\n\r\n    twin-bcrypt <cost> <password-to-hash>\r\n\r\nWith a local installation:\r\n\r\n    node_modules/.bin/twin-bcrypt <cost> <password-to-hash>\r\n\r\n\r\n## About prefixes\r\nBack in the old days when all bcrypt-hashed passwords had the `$2a$` prefix, a bug was discovered in the crypt_blowfish implementation of this algorithm.\r\nA small fraction of the `$2a$` passwords were buggy, but most of them were just fine. It was then decided to\r\n[create two new prefixes](http://www.openwall.com/lists/oss-security/2011/06/21/16) to distinguish between them :\r\n\r\n  * 2a - unknown correctness (may be correct, may be buggy)\r\n  * 2x - sign extension bug\r\n  * 2y - definitely correct\r\n\r\nTwin-bcrypt uses the `$2y$` prefix by default, and can check correct `$2a$` passwords.\r\nHowever it does not emulate the sign extension bug of old crypt_blowfish implementations, and thus doesn't recognize the legacy `$2x$` prefix.\r\n\r\n\r\n## About asm.js\r\n[asm.js](https://en.wikipedia.org/wiki/Asm.js) is an extraordinarily optimizable, low-level subset of JavaScript designed by Mozilla.\r\nAs a subset of JavaScript it runs in any browser, but until now only Firefox shows really outstanding performance. The V8 engine (used in Chrome and Node.js)\r\nruns asm.js sometimes even slower than regular js.  \r\nTwin-Bcrypt embeds two functionally identical bcrypt encoders : one is written in asm.js, the other one uses regular JavaScript. The asm.js encoder is\r\ncurrently used only in the Firefox browser. This may evolve over time with JavaScript engines to always bring the best performance.\r\n\r\n\r\n## Credits\r\nThis project is a fork of [bcrypt-nodejs](https://github.com/shaneGirish/bcrypt-nodejs), which is based on [javascript-bcrypt](https://code.google.com/p/javascript-bcrypt/), which is itself a\r\njavascript port of damien miller's [jBCrypt](https://code.google.com/p/jbcrypt/).\r\n",
  "readmeFilename": "README.md",
  "_id": "twin-bcrypt@2.1.1",
  "dist": {
    "shasum": "31830971d40a63db8bcd57a87f8ccca2fd8a33d4"
  },
  "_from": "twin-bcrypt@",
  "_resolved": "https://registry.npmjs.org/twin-bcrypt/-/twin-bcrypt-2.1.1.tgz"
}
