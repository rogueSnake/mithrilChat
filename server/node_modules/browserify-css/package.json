{
  "name": "browserify-css",
  "version": "0.6.1",
  "description": "A Browserify transform for bundling, rebasing, inlining, and minifying CSS files",
  "main": "./index.js",
  "browser": "./browser.js",
  "scripts": {
    "test": "npm run gulp && npm run tap-test",
    "gulp": "gulp",
    "tap-test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cheton/browserify-css"
  },
  "keywords": [
    "browser",
    "browserify",
    "browserify-transform",
    "css",
    "dom",
    "minify",
    "transform"
  ],
  "author": {
    "name": "Cheton Wu"
  },
  "license": "MIT",
  "dependencies": {
    "clean-css": "2.2.x",
    "concat-stream": "1.4.x",
    "css": "1.6.x",
    "lodash": "3.6.x",
    "through2": "0.6.x"
  },
  "devDependencies": {
    "browserify": "^8.1.3",
    "del": "^1.1.1",
    "exorcist": "^0.1.6",
    "fs-extra": "^0.18.0",
    "gulp": "^3.8.11",
    "gulp-jshint": "^1.9.2",
    "gulp-util": "^3.0.4",
    "jsdom": "^3.1.2",
    "require-dir": "^0.3.0",
    "run-sequence": "^1.0.2",
    "tap": "^0.7.1",
    "vinyl-source-stream": "^1.1.0",
    "yargs": "^3.7.0"
  },
  "bugs": {
    "url": "https://github.com/cheton/browserify-css/issues"
  },
  "homepage": "http://cheton.github.io/browserify-css/",
  "readme": "# browserify-css [![build status](https://travis-ci.org/cheton/browserify-css.svg?branch=master)](https://travis-ci.org/cheton/browserify-css) [![Coverage Status](https://coveralls.io/repos/cheton/browserify-css/badge.svg)](https://coveralls.io/r/cheton/browserify-css)\n\n[![NPM](https://nodei.co/npm/browserify-css.png?downloads=true&stars=true)](https://nodei.co/npm/browserify-css/)\n\nA Browserify transform for bundling, rebasing, inlining, and minifying CSS files. It's useful for CSS modularization where styles are scoped to their related bundles.\n\n## Getting Started\n\nIf you're new to browserify, check out the [browserify handbook](https://github.com/substack/browserify-handbook) and the resources on [browserify.org](http://browserify.org/).\n\n## Installation\n\n`npm install --save-dev browserify-css`\n\n## Usage\n\napp.css:\n``` css\n@import url(\"modules/foo/index.css\");\n@import url(\"modules/bar/index.css\");\nbody {\n    background-color: #fff;\n}\n```\n\napp.js:\n``` js\nvar css = require('./app.css');\nconsole.log(css);\n```\n\nYou can compile your app by passing -t browserify-css to browserify:\n``` bash\n$ browserify -t browserify-css app.js > bundle.js\n```\n\nEach `require('./path/to/file.css')` call will concatenate CSS files with @import statements, rebasing urls, inlining @import, and minifying CSS. It will add a style tag with an optional data-href attribute to the head section of the document during runtime:\n\n``` html\n<html>\n<head>\n    <style type=\"text/css\" data-href=\"app.css\">...</style>\n</head>\n</html>\n```\n\n## Configuration\n\nYou can set configuration to your package.json file:\n``` json\n{\n    \"browserify-css\": {\n        \"autoInject\": true,\n        \"minify\": true,\n        \"rootDir\": \".\"\n    }\n}\n```\n\nor use an external configuration file like below:\n``` json\n{\n    \"browserify-css\": \"./config/browserify-css.js\"\n}\n```\n\nconfig/browserify-css.js:\n``` js\nmodule.exports = {\n    \"autoInject\": true,\n    \"minify\": true,\n    \"rootDir\": \".\"\n};\n```\n\nFurthermore, browserify-css transform can obtain options from the command-line with subarg syntax:\n```\n$ browserify -t [ browserify-css --autoInject=true ] app.js\n```\nor from the api:\n```\nb.transform('browserify-css', { autoInject: true })\n```\n\n## Options\n\n### autoInject\n\nType: `Boolean`\nDefault: `true`\n\nIf true, each `require('path/to/file.css')` call will add a style tag to the head section of the document.\n\n### autoInjectOptions\n\nType: `Object`\nDefault: \n``` json\n{\n    \"verbose\": true\n}\n```\n\nIf verbose is set to true, the path to CSS will be specified in the data-href attribute inside the style tag\n\n### minify\n\nType: `Boolean`\nDefault: `false`\n\n### minifyOptions\n\nType: `Object`\nDefault: `{}`\n\nCheck out a list of CSS minify options at [CleanCSS](https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-programmatically).\n\n### processRelativeUrl\n\nType: `Function`\n\nThe `processRelativeUrl` option accepts a function which takes one argument (the relative url) and returns the original `relativeUrl` string or the converted result. For example:\n``` javascript\nvar browserify = require('browserify');\n\nbrowserify(options)\n    .add('src/index.js')\n    .transform(require('browserify-css'), {\n        rootDir: 'src',\n        processRelativeUrl: function(relativeUrl) {\n            return relativeUrl;\n        }\n    })\n    .bundle();\n```\n\nYou can embed the image data directly into the CSS file with data URI, like so:\n``` javascript\nvar _ = require('lodash');\nvar path = require('path');\nvar browserify = require('browserify');\n\nbrowserify(options)\n    .add('src/index.js')\n    .transform(require('browserify-css'), {\n        rootDir: 'src',\n        processRelativeUrl: function(relativeUrl) {\n            if (_.contains(['.jpg','.png','.gif'], path.extname(relativeUrl))) {\n                // Embed image data with data URI\n                var DataUri = require('datauri');\n                var dUri = new DataUri(relativeUrl);\n                return dUri.content;\n            }\n            return relativeUrl;\n        }\n    })\n    .bundle();\n```\n\nYou may also want to check out the  [FAQ](https://github.com/cheton/browserify-css#2-how-do-i-load-font-and-image-files-from-node_modules) for advanced usage.\n\n### rootDir\n\nType: `String`\nDefault: `./`\n\nAn absolute path to resolve relative paths against the project's base directory.\n\n## FAQ \n### 1. How do I include CSS files located inside the node_modules folder?\nYou can choose one of the following methods to include CSS files located inside the node_modules folder:\n\n1. The easiest way to do this is using the `@import` rule. For example:\n\n  app.js:\n  ``` javascript\n  require('./app.css');\n  ```\n\n  app.css:\n  ``` css\n  /* Use CSS from your node_modules folder */\n  @import \"node_modules/foo/foo.css\";\n\n  /* Or your own relative files */\n  @import \"styles/common.css\";\n  ```\n  \n2. Use the global transform option (i.e. `--global-transform` or `-g`) on the command line to transform all files in a node_modules directory:\n\n  ``` bash\n  $ browserify -g browserify-css app.js > bundle.js \n  ```\n\n  or use the API directly:\n\n  ``` javascript\n  var browserify = require('browserify');\n  var b = browserify('./app.js');\n  b.transform('browserify-css', {global: true});\n  b.bundle().pipe(process.stdout);\n  ```\n  See [browserify transform options](https://github.com/substack/node-browserify#btransformtr-opts) for details.\n\n3. Put browserify transform option into a submodule's package.json file inside the `node_modules` directory on a **per-module basis** like so:\n\n  node_modules/foo/package.json:\n  ``` json\n  {\n    \"browserify\": {\n      \"transform\": [\"browserify-css\"]\n    }\n  }\n  ```\n\n  Then, run browserify transform on the command line:\n  ``` bash\n  $ browserify -t browserify-css app.js > bundle.js \n  ```\n\n### 2. How do I load font and image files from node_modules?\n\nAssume that you have the following directory structure:\n``` bash\npackage.json\ndist/\nsrc/\n    index.js\n    index.css\nnode_modules/\n    bootstrap/\n        dist/\n            css/\n                bootstrap.css\n```\n\nThe `index.css` uses `@import` to import external style sheets:\n``` css\n@import url(\"../node_modules/bootstrap/dist/css/bootstrap.css\");\n```\n\nAll output files, including the generated `bundle.js`, are created under the `dist` directory:\n``` bash\ndist/\n    bundle.js\n    vendor/\n        bootstrap/\n            dist/\n                css/\n                    bootstrap.css\n```\n\nSuppose that the `dist` directory is your web root, you might want to copy external font and images files from `../node_modules/` to `dist/vendor/`.\n\nFor example, the `@font-face` rules in `node_modules/bootstrap/dist/css/bootstrap.css`:\n``` css\n@font-face {\n    font-family: 'Glyphicons Halflings';\n    src: url('../fonts/glyphicons-halflings-regular.eot');\n    src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),\n         url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'),\n         url('../fonts/glyphicons-halflings-regular.woff') format('woff'),\n         url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'),\n         url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');\n}\n```\n\nThe example below illustrates the use of the `processRelativeUrl` option:\n``` javascript\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar path = require('path');\nvar browserify = require('browserify');\nvar sourceStream = require('vinyl-source-stream');\n\nvar bundleStream = browserify()\n    .add('src/index.js')\n    .transform(require('browserify-css'), {\n        rootDir: 'src',\n        processRelativeUrl: function(relativeUrl) {\n            var stripQueryStringAndHashFromPath = function(url) {\n                return url.split('?')[0].split('#')[0];\n            };\n            var rootDir = path.resolve(process.cwd(), 'src');\n            var relativePath = stripQueryStringAndHashFromPath(relativeUrl);\n            var queryStringAndHash = relativeUrl.substring(relativePath.length);\n\n            //\n            // Copying files from '../node_modules/bootstrap/' to 'dist/vendor/bootstrap/'\n            //\n            var prefix = '../node_modules/';\n            if (_.startsWith(relativePath, prefix)) {\n                var vendorPath = 'vendor/' + relativePath.substring(prefix.length);\n                var source = path.join(rootDir, relativePath);\n                var target = path.join(rootDir, vendorPath);\n\n                gutil.log('Copying file from ' + JSON.stringify(source) + ' to ' + JSON.stringify(target));\n                fse.copySync(source, target);\n\n                // Returns a new path string with original query string and hash fragments\n                return vendorPath + queryStringAndHash;\n            }\n\n            return relativeUrl;\n        }\n    })\n    .bundle();\n\nbundleStream\n    .pipe(sourceStream(bundleFile))\n    .pipe(gulp.dest(browserifyConfig.dest));\n\n```\n\n\n## License\n\nCopyright (c) 2014-2015 Cheton Wu\n\nLicensed under the [MIT License](https://github.com/cheton/browserify-css/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "browserify-css@0.6.1",
  "_from": "browserify-css@"
}
